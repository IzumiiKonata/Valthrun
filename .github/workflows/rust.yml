name: Rust

on:
  push:
    branches: ["master", "amd", "radar"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-radar-web:
    name: Radar Web Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: "yarn"
          cache-dependency-path: |
            radar/web/yarn.lock
      - name: Run install
        uses: borales/actions-yarn@v4
        with:
          cmd: install
          dir: radar/web
      - name: Build production bundle
        uses: borales/actions-yarn@v4
        with:
          cmd: build
          dir: radar/web
        env:
          NODE_ENV: production
      - uses: actions/upload-artifact@v3
        name: Upload
        with:
          name: radar-www
          path: radar/web/dist

  # TODO: Build as Matrix for Linux & Windows
  build-radar-server:
    name: Radar Server (${{ matrix.build }})
    strategy:
      matrix:
        build: [linux, windows]
        include:
          - build: linux
            os: ubuntu-20.04
            target: radar-server-standalone
            # https://github.com/clap-rs/clap/issues/1938#issuecomment-632186396
            flags: ""

          - build: windows
            os: windows-latest
            target: radar-server-standalone.exe
            flags: -Ctarget-feature=+crt-static

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build
        run: cargo build --verbose --release --bin radar-server-standalone-${{ matrix.os }}
        env:
          RUSTFLAGS: ${{ matrix.flags }}
      - uses: actions/upload-artifact@v3
        name: Upload radar server
        with:
          name: radar-server-${{ matrix.build }}
          path: target/release/${{ matrix.target }}

  build-radar-client:
    name: Radar Client
    runs-on: windows-latest

    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build
        run: cargo build --verbose --release --bin radar-client-standalone
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
      - uses: actions/upload-artifact@v3
        name: Upload
        with:
          name: radar_client_standalone
          path: target/release/radar-client-standalone.exe

  build-overlay:
    name: CS2 Overlay
    runs-on: windows-latest

    steps:
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: Build
        run: cargo build --verbose --release --bin controller
        env:
          RUSTFLAGS: -Ctarget-feature=+crt-static
      - uses: actions/upload-artifact@v3
        name: Upload
        with:
          name: cs2_overlay
          path: target/release/controller.exe

  Release:
    needs: [ build-radar-web, build-radar-server, build-radar-client, build-overlay ]
    runs-on: ubuntu-latest
    env:
      Release_DIR: /home/runner/work/release
    steps:

      - name: Set current time
        id: set_time
        run: echo "time=$(date + '%Y-%m-%d_%H-%M-%S')" >> "$GITHUB_OUTPUT"

      - name: Generate release tag
        id: tag
        run: |
          echo "release_tag=$(date +"%Y%m%d_%H-%M-%S")" >> $GITHUB_OUTPUT
          touch release.txt
          echo "Commit Message:" >> release.txt
          echo "${{ github.event.workflow_run.head_commit.message }}" >> release.txt
          echo "Build Date: $(date +"%Y/%m/%d")" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ env.Release_DIR }}

      - name: Zip radar server assets
        run: zip -r ${{ env.Release_DIR }}/radar-www/radar-www.zip ${{ env.Release_DIR }}/radar-www

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v.${{ steps.tag.outputs.release_tag }}
          name: ${{ steps.tag.outputs.release_tag }} Valthrun
          body_path: release.txt
          files: |
            ${{ env.Release_DIR }}/cs2_overlay/controller.exe
            ${{ env.Release_DIR }}/radar-server-linux/radar-server-standalone-linux
            ${{ env.Release_DIR }}/radar-server-windows/radar-server-standalone-windows.exe
            ${{ env.Release_DIR }}/radar_client_standalone/radar-client-standalone.exe
            ${{ env.Release_DIR }}/radar-www/radar-www.zip
